"""
State:          Assets placer
State type:     assets_placer
Description:    Assets placer
Author:         aapalikov
Computer Name:  l23
Date Created:   May 13, 2020 - 23:47:41
"""

# Usage: This sample adds points to the construction plane.
# 
# If you embedded the state in a SOP HDA:
# 1) Dive in the HDA and add a SOP Add node
# 2) Open the Add node property page and promote the Number of Points parm (Alt+MMB)
# 3) LMB in the viewer to add points.
# 
# If you created a file python state:
# 1) Create an empty geometry and dive in.
# 2) Create an Embedded HDA: Subnetwork, RMB, Create Digital Asset..., Operator Name: test, Save To Library: Embedded, Accept.
# 3) Dive in the Embedded HDA and add a SOP Add node
# 4) Open the Add node property page and promote the Number of Points parm (Alt+MMB)
# 5) Set Node Default State: test in Type Operator Properties, Accept.
# 6) LMB in the viewer to add points.

import stateutils,hou
import viewerstate.utils as su
from stateutils import ancestorObject
from stateutils import sopGeometryIntersection
import random

def getappver():
    app=[]
    ver=hou.applicationVersionString().split('.')
    major=int(ver[0])
    minor=int(ver[1])
    build=int(ver[2])
    return major,minor,build
    
def str2vector(string,sep=':'):
    try:
        arr=string.split(sep)
        result=hou.Vector3(0,0,0)
        for idx,a in enumerate(arr):
            result.__setitem__(idx, float(a))
        hou.Vector4(result)
    except:
        result=None
    return result
        
def buildTransform4(trans,rot,scale, rotate_order="xyz"):
    result = hou.hmath.identityTransform()
    result *= hou.hmath.buildRotate(rot, rotate_order)
    result *= hou.hmath.buildTranslate(trans)
    result *= hou.hmath.buildScale(scale)
    
    return result
    
def rvec(vec):
    result=hou.Vector3(0,0,0)
    res=[vec[0],vec[1],vec[2]]
    for idx,a in enumerate(res):
        a=float(int(a*10000))/10000
        result.__setitem__(idx, float(a))
        
    return result
    
 

#######################update positions
def updp(node):
    count=int(node.parm('points').eval())
    for i in range(count):
        try:
            raw=(node.parm("geodatapath_%d" %i).eval()).split(',')
            nodea=hou.node(raw[0])
            prim=nodea.geometry().prim(int(raw[1]))
            
            if 'Packed' not in raw[3]:
                prim=None
                nodeobj=nodea.parent()
                try:
                    prim=nodeobj.renderNode().geometry().prim(int(raw[1]))
                except:
                    pass
                if prim is None:
                    prim=nodeobj.displayNode().geometry().prim(int(raw[1]))
                    
                normal=prim.normal()
                uv=raw[2].split(':')
                pos=prim.attribValueAtInterior('P',float(uv[0]),float(uv[1]))
                pos=hou.Vector3(pos[0],pos[1],pos[2])
                if raw[3]=='Primary': ###############For polygons input0 
                    node.parmTuple("position_%d" % i).set(pos)
                    node.parmTuple("normal%d" % i).set(normal)                
                else: ###############For polygons in viewport
                    worldmatrix=nodeobj.worldTransform()
                    rotmatrix=worldmatrix.extractRotationMatrix3()
                    newpos=pos*worldmatrix
                    newnorm=normal*rotmatrix
                    node.parmTuple("position_%d" % i).set(newpos)
                    node.parmTuple("normal%d" % i).set(newnorm)
            else:
                ####Read
                cprim=nodea.geometry().prim(int(raw[1]))
                nodeobj=nodea.parent()
                try:
                    cprim=nodeobj.displayNode().geometry().prim(int(raw[1]))
                except:
                    pass
                    
                origtr=str2vector(raw[4])
                origrot=str2vector(raw[5])
                origscale=str2vector(raw[6])  
                #######local Packed Transform   
                lmat=None
                try:
                    lmat=cprim.fullTransform()
                except:
                    pass

                ltr=str2vector(raw[7])
                lrt=str2vector(raw[8])
                lsc=str2vector(raw[9])
                    
                ######World OBJ Transform
                mat=nodea.parent().worldTransform()
                
                
                if str(mat.explode()['translate'].length())!=str(hou.Vector3(origtr).length()) or  str(mat.explode()['rotate'].length())!=str(hou.Vector3(origrot).length()) or  str(mat.explode()['scale'].length())!=str(hou.Vector3(origscale).length()):
                    ####RevertWorld
                    origmat=buildTransform4(origtr,origrot,origscale)
                    orignormal=hou.Vector3(node.parmTuple("normal%d" % i).eval())*origmat.inverted().extractRotationMatrix3()
                    origpos=hou.Vector4(hou.Vector3(node.parmTuple("position_%d" % i).eval()))*origmat.inverted()
                    
                    ###Compute new Obj transform
                    rotmatrix=mat.extractRotationMatrix3()
                    newpos=hou.Vector3(origpos*mat)
                    newnorm=orignormal*rotmatrix
                    ##Set parms
                    node.parmTuple("position_%d" % i).set(newpos)
                    node.parmTuple("normal%d" % i).set(newnorm)
                    ##Update Obj transform Properties
                    raw[4]=str(mat.explode()['translate'][0])+':'+str(mat.explode()['translate'][1])+':'+str(mat.explode()['translate'][2])
                    raw[5]=str(mat.explode()['rotate'][0])+':'+str(mat.explode()['rotate'][1])+':'+str(mat.explode()['rotate'][2])
                    raw[6]=str(mat.explode()['scale'][0])+':'+str(mat.explode()['scale'][1])+':'+str(mat.explode()['scale'][2])
                    node.parm("geodatapath_%d" % i).set(','.join(raw))
                
                    
                ##########LOCAL Transform    
                if str(hou.Vector3(ltr).length())!=str(lmat.explode()['translate'].length()) or  str(hou.Vector3(lrt).length())!=str(lmat.explode()['rotate'].length()) or  str(rvec(hou.Vector3(lsc)).length())!=str(rvec(lmat.explode()['scale']).length()):
                    ####RevertWorld
                    localmat = hou.hmath.identityTransform()
                    localmat *= hou.hmath.buildRotate(lrt, 'xyz')
                    localmat *= hou.hmath.buildTranslate(ltr)
                    localmat *= hou.hmath.buildScale(lsc)
                    
                    orignormal=hou.Vector3(node.parmTuple("normal%d" % i).eval())*localmat.inverted().extractRotationMatrix3()
                    
                    origpos=hou.Vector4(hou.Vector3(node.parmTuple("position_%d" % i).eval()))*localmat.inverted()
                    
                    ###Compute new Packed transform
                    rotmatrix=lmat.extractRotationMatrix3()
                    newpos=hou.Vector3(origpos*lmat)
                    newnorm=orignormal*rotmatrix
                    ##Set parms
                    node.parmTuple("position_%d" % i).set(hou.Vector3(newpos))
                    node.parmTuple("normal%d" % i).set(newnorm)
                    ##Update Local packed Properties
                    
                    raw[7]=str(lmat.explode()['translate'][0])+':'+str(lmat.explode()['translate'][1])+':'+str(lmat.explode()['translate'][2])
                    raw[8]=str(lmat.explode()['rotate'][0])+':'+str(lmat.explode()['rotate'][1])+':'+str(lmat.explode()['rotate'][2])
                    raw[9]=str(lmat.explode()['scale'][0])+':'+str(lmat.explode()['scale'][1])+':'+str(lmat.explode()['scale'][2])
                    node.parm("geodatapath_%d" % i).set(','.join(raw))

                    
        except:
            pass
        
        
        

#######################################
    
    

class DrawPoints(object):
    
    def __init__(self, state_name, scene_viewer):
        self.state_name = state_name
        self.scene_viewer = scene_viewer
        self._guide = None
        self._guidebase = None
        self._node = None
        self._pressed = False
        self._index = 0
        self._indexes=[]
        self.names_list=[]
        self.key_pressed=''
        self.MSG="LMB to add points to the construction plane \n WheelMouse for scale \n Cntrl+WheelMouse for rotate \n Middle Button for change position \n +- Buttons for change instance"
        self.ix=0        
        self.names_idx=[]
        self.collisiongeo=None

        
        
        
    def onEnter(self, kwargs): 
        #################Messages
        self.scene_viewer.setPromptMessage(self.MSG)
        ####Guidebase (Collision)
        node = self._node = kwargs["node"]
        try:
            geo = node.node("guide").geometry()
            self.collisiongeo=geo
            ver=getappver()[0]
            if ver>=18:
                self._guidebase = hou.SimpleDrawable(
                self.scene_viewer, geo,
                self.state_name + "_guidebase"
                )
            
            else:
    
                self._guidebase = hou.Drawable(
                self.scene_viewer, geo,
                self.state_name + "_guidebase"
                )
               
            self._guidebase.setDisplayMode(hou.drawableDisplayMode.CurrentViewportMode)
            self._guidebase.setWireframeColor(hou.Color(0.72,0.02,0.05)) 
            self._guidebase.enable(True)
            self._guidebase.show(True)
        #################
        except:
            pass
        geonames = node.node("names").geometry()
        
        try:
            self.names_list=list(set(geonames.primStringAttribValues('tmp_name')))
        except:
            pass
        
        idxdata=[]
        try:
            idxdata=(node.cachedUserData("instanceidx")).split(',')
        except:
            pass
        if len(idxdata)>0:
            tmpidx=[]
            for i in idxdata:
                tmpidx.append(int(i))
            self.names_idx=tmpidx
        else:
            count=len(self.names_list)
            if count>0:
                tmpidx=[]
                rng = range(0, count)    
                for n in rng:
                    tmpidx.append(n)
                self.names_idx= tmpidx       
            else:
                self.names_idx=[]
########################################Get indexes from userdata
        idxdata=[]
        try:
            idxdata=(node.cachedUserData("ptidx")).split(',')
        except:
            pass
        if len(idxdata)>0:
            tmpidx=[]
            for i in idxdata:
                tmpidx.append(int(i))
            self._indexes=tmpidx
        else:
            self._indexes=[]



##################################################
#########################Draw
    def onDraw( self, kwargs ):
        # draw the text in the viewport upper left
        handle = kwargs['draw_handle']

        (x,y,width,height) = self.scene_viewer.curViewport().size()
        margin = 10
#########################################
###############################Selections        
    def onStartSelection(self, kwargs):
        """ Called when a bound selector has been started
        """
        node = self._node = kwargs["node"]        
            
    def onSelection(self, kwargs):
        """ Called when a selector has selected something
        """

        inx=[]
        self.scene_viewer.setGroupListVisible(True)
        selection = kwargs["selection"]
        if selection.geometryType() == hou.geometryType.Primitives:
            if len(selection.mergedSelectionString())>0:
                sgrp=str(selection.mergedSelectionString()).split(' ')
                for s in sgrp:
                    if '-' in s:
                        tgrp=s.split('-')
                        rng = range(int(tgrp[0]), int(tgrp[1])+1)    
                        for n in rng:
                            inx.append(n)
                    else:
                        inx.append(int(s))
            else:
                count = selection.selections()[0].numSelected()
                rng = range(0, count)
                for n in rng:
                    inx.append(n)

                
        self._indexes=inx
        tmpidx=[]
        for i in inx:
            tmpidx.append(str(i))
        node = self._node = kwargs["node"]    
        node.setCachedUserData("ptidx", ','.join(tmpidx))
        self.log(selection)

        # Must return True to accept the selection
        return False        
#########################################    
###########################Custom Command

    def onCommand(self, kwargs):
        """ Use this callback to implement custom commands. 
        """
        command_name = kwargs["command_name"]
        command_args = kwargs["command_args"]

########################################
################################Keyboard

    
    def onKeyEvent(self, kwargs):
#        """ Called for processing a keyboard event

#        """

        ui_event = kwargs["ui_event"]
        self.key_pressed = ui_event.device().keyString()
        node = self._node = kwargs["node"]
        viewport = self.scene_viewer.curViewport()
        
######### + - Buttons 
        if self.key_pressed =='=' or self.key_pressed =='-':
        
            if len(self.names_list)>0:
                if len(self._indexes)>0:
                    for i in self._indexes:
                        current=node.parm('instance'+str(i)).eval()
                        index=0
                        if current in self.names_list:
                            index= self.names_list.index(current)
                        if self.key_pressed =='=':
                            index+=1
                        elif self.key_pressed =='-':
                            index-=1
                        if index<0:
                            index=len(self.names_list)-1
                        elif index>len(self.names_list)-1:
                            index=0
                        val=str(self.names_list[index])
                        self._instanceset(i, val)         
                
#
        return False
        
        
##########################################
#########################ParameterCallback
    def onParmChangeEvent(self, kwargs):
        """ Implement this callback to react to state parameter changes. 
        """
        parm_name = kwargs["parm_name"]
        parm_value = kwargs["parm_value"]
        state_parms = kwargs["state_parms"]
        ui_event = kwargs["ui_event"]
##########################################
############################Menu Callbacks      
    def onMenuAction(self, kwargs):
        """ Callback implementing the actions of a bound menu. Called 
        when a menu item has been selected. 
        """

        menu_item = kwargs["menu_item"]
        #state_parms = kwargs["state_parms"]
##############Select Instances for place
        if kwargs["menu_item"]=='1':
            node = self._node = kwargs["node"]
            geo = node.node("names").geometry()
            if len(self.names_list)==0:
                try:
                    self.names_list=list(set(geo.primStringAttribValues('tmp_name')))
                except:
                    pass
                                                                                
            self.names_idx=hou.ui.selectFromList(self.names_list,default_choices=self.names_idx,title='Chose Geometry for instancing')
            if self.names_idx is not None:
                tmpidx=[]
                for i in self.names_idx:
                    tmpidx.append(str(i))
            node.setCachedUserData("instanceidx", ','.join(tmpidx))
#######################Replace Selection            
        if kwargs["menu_item"]=='2':
            node = self._node = kwargs["node"]
            geo = node.node("names").geometry()
            if len(self.names_list)==0:
                try:
                    self.names_list=list(set(geo.primStringAttribValues('tmp_name')))
                except:
                    pass
                    
            chose=hou.ui.selectFromList(self.names_list, exclusive=True,title='Chose Geometry for replace')
            if len(chose)>0:
                val=str(self.names_list[chose[0]])
                self._instanceselect(self._indexes, val)
#####################Deactivate Selection
        if kwargs["menu_item"]=='3':
            if len(self._indexes)>0:
                self._removeselect(self._indexes)  
            
            
    def onMenuPreOpen(self, kwargs):
        """ Implement this callback to update the menu content before 
        it is drawn. 
        """        
        menu_states = kwargs["menu_states"]
        menu_item_states = kwargs["menu_item_states"]

        
#######################################         
    def _parmslist(self):
        a=self.names_list
        return a
        
    def _removeselect(self,indexes):
        if len(indexes)>0:
            for i in indexes:
                self._node.parm("enable%d" % i).set(0)
        
    def _instanceset(self, index, val):
        try:
            self._node.parm("instance%d" % index).set(val)
        except:
            pass        
        
        
    def _instanceselect(self, indexes, val):
        if len(indexes)>0:
            for i in indexes:
                try:
                    self._node.parm("instance%d" % i).set(val)
                except:
                    pass
###########set hidden data                    
    def _sethiddendata(self, indexes, val):
        if len(indexes)>0:
            for i in indexes:    
                try:
                    self._node.parm("geodatapath_%d" % i).set(val)
                except:
                    pass
############################ 
    def _offset(self, indexes, val):
        sense=self._node.parm('sensetivity').eval()
        if len(indexes)>0:
            for i in indexes:
                try:
                    self._node.parm("offset%d" % i).set(self._node.parm("offset%d" % i).eval()+float(val)/10*sense)
                except:
                    pass                                   
                
    def _point_count(self):
        multiparm = self._node.parm("points")
        # This is how you get the number of instances in a multiparm
        return multiparm.evalAsInt()

    def _insert_point(self):
        index = self._point_count()
        multiparm = self._node.parm("points")
        multiparm.insertMultiParmInstance(index)
        self._indexes=[index]
        
        self._node.setCachedUserData("ptidx", str(index))
        return [index]

    def _set(self, indexes, position):
        if len(indexes)>0:
            for i in indexes:
                try:
                    self._node.parm("usept%d" % i).set(1)
                    self._node.parmTuple("position_%d" % i).set(position)
                    self._node.parm("id%d" % i).set(i)
                except:
                    pass
                    
    def _setrand(self, indexes):
        bool=self._node.parm('random_rotate').eval()
        if len(indexes)>0:
            for i in indexes:
                try:
                    self._node.parm("random_rot%d" % i).set(bool)
                except:
                    pass               
                    
                    
    def _setnorm(self, indexes, normal):
        if len(indexes)>0:
            for i in indexes:
                try:
                    self._node.parmTuple("normal%d" % i).set(normal)
                except:
                    pass
        
    def _rot(self, indexes, rotate):
        sense=self._node.parm('sensetivity').eval()
        if len(indexes)>0:
            for i in indexes:
                try:
                    self._node.parm("rot%d" % i).set(self._node.parm("rot%d" % i).eval()+float(rotate)*5*sense)
                except:
                    pass                
                
        
    def _scale(self, indexes, scale):
        sense=self._node.parm('sensetivity').eval()
        
        if len(indexes)>0:
            for i in indexes:
                try:
                    self._node.parm("scale%d" % i).set(self._node.parm("scale%d" % i).eval()+float(scale)/50*sense)
                except:
                    pass
        

    def _start(self):
        if not self._pressed:
            self.scene_viewer.beginStateUndo("Add point")
            self._indexes = self._insert_point()
            self._setrand(self._indexes)
            self.ix=random.choice(self.names_idx)
        self._pressed = True

    def _finish(self):
        if self._pressed:
            self.scene_viewer.endStateUndo()
        self._pressed = False
#############################################
#################################Mouse events

    def onMouseEvent(self, kwargs):
        try:
            node = self._node = kwargs["node"] 
            ui_event = kwargs["ui_event"]
            device = ui_event.device()
            origin, direction = ui_event.ray()
            viewport = self.scene_viewer.curViewport()
            pixpos=[int(device.mouseX()),int(device.mouseY())] 
            # Find intersection with geometry or ground
            intersected = 0
            inputs = node.inputs()
            
            # Only try intersecting geometry if this node has input
            if inputs[0] is not None and self.collisiongeo is not None: 
                #gi=su.GeometryIntersector(self.collisiongeo, scene_viewer=self.scene_viewer)
                
                gi=sopGeometryIntersection(self.collisiongeo,origin,direction)
                #gi.intersect(origin, direction)
                intersected=0
                if gi[0]!=-1:
                    intersected=1
                    try:
                        if device.isLeftButton():
                            position=gi[1]
                            normal = gi[2]
                            self._start()
                            self._set(self._indexes, position)
                            self._setnorm(self._indexes, normal)            
                            val=str(self.names_list[self.ix])
                            self._instanceselect(self._indexes, val)
                            hiddendata=self.collisiongeo.sopNode().path()+','+str(gi[0])+','+str(gi[3][0])+':'+str(gi[3][1])+',Primary'
                            self._sethiddendata(self._indexes,hiddendata)
                                   
                        elif device.isMiddleButton() and intersected:
                            position=gi[1]
                            normal = gi[2]
                            self._set(self._indexes, position)
                            self._setnorm(self._indexes, normal)
                            hiddendata=self.collisiongeo.sopNode().path()+','+str(gi[0])+','+str(gi[3][0])+':'+str(gi[3][1])+',Primary'
                            self._sethiddendata(self._indexes,hiddendata)                    
                        else:
                            self._finish()            
                    except:
                        pass
                
            else:
                    if device.isLeftButton():
                        try:
                            vpnode=viewport.queryNodeAtPixel(pixpos[0], pixpos[1]) #OBJ node from viewport
                            if vpnode is not None and vpnode !=node:
                                rawprim=viewport.queryPrimAtPixel(vpnode, pixpos[0], pixpos[1])
                                mat=vpnode.parent().worldTransform().inverted()
                                origin, direction=ui_event.ray()
                                originp=hou.Vector4(origin)
                                geop=vpnode.geometry()
                                neworig=hou.Vector3(originp*mat)
                                newdir=direction*mat.extractRotationMatrix3()
                                gi=sopGeometryIntersection(geop,neworig,newdir)
                                if gi[0]!=-1 and device.isLeftButton():
                                    position=gi[1]*mat.inverted()
                                    normal = gi[2]*mat.inverted().extractRotationMatrix3()
                                    self._start()
                                    self._set(self._indexes, position)
                                    self._setnorm(self._indexes, normal)                        
                                    val=str(self.names_list[self.ix])
                                    self._instanceselect(self._indexes, val)
                                    mat=mat.inverted()
                                    mattr=str(mat.explode()['translate'][0])+':'+str(mat.explode()['translate'][1])+':'+str(mat.explode()['translate'][2])
                                    matrt=str(mat.explode()['rotate'][0])+':'+str(mat.explode()['rotate'][1])+':'+str(mat.explode()['rotate'][2])
                                    matsc=str(mat.explode()['scale'][0])+':'+str(mat.explode()['scale'][1])+':'+str(mat.explode()['scale'][2])
                                    
                                    lmattr=lmatrt=lmatsc='0.0:0.0:0.0'  
                                    try:
                                        locmat=vpnode.geometry().prim(gi[0]).fullTransform()
                                        
                                        lmattr=str(locmat.explode()['translate'][0])+':'+str(locmat.explode()['translate'][1])+':'+str(locmat.explode()['translate'][2])
                                        lmatrt=str(locmat.explode()['rotate'][0])+':'+str(locmat.explode()['rotate'][1])+':'+str(locmat.explode()['rotate'][2])
                                        lmatsc=str(locmat.explode()['scale'][0])+':'+str(locmat.explode()['scale'][1])+':'+str(locmat.explode()['scale'][2])
                                    except:
                                        pass
                                    
                                    hiddendata=vpnode.path()+','+str(gi[0])+','+str(gi[3][0])+':'+str(gi[3][1])+','+rawprim.type().name()+','+mattr+','+matrt+','+matsc+','+lmattr+','+lmatrt+','+lmatsc                              
        
                                    
                                    self._sethiddendata(self._indexes,hiddendata)
                        except:
                            pass
                               
                                
                    elif device.isMiddleButton():
                        try:
                            vpnode=viewport.queryNodeAtPixel(pixpos[0], pixpos[1]) #OBJ node from viewport 
                            rawprim=viewport.queryPrimAtPixel(vpnode, pixpos[0], pixpos[1])
                            if vpnode is not None and vpnode !=node:
                                mat=vpnode.parent().worldTransform().inverted()
                                origin, direction=ui_event.ray()
                                originp=hou.Vector4(origin)
                                geop=vpnode.geometry()
                                neworig=hou.Vector3(originp*mat)
                                newdir=direction*mat.extractRotationMatrix3()
                                
                                gi=sopGeometryIntersection(geop,neworig,newdir)
                                if gi[0]!=-1:
                                    position=gi[1]*mat.inverted()
                                    normal = gi[2]*mat.inverted().extractRotationMatrix3()
                                    
                                    self._set(self._indexes, position)
                                    self._setnorm(self._indexes, normal)
                                    mat=mat.inverted()
                                    mattr=str(mat.explode()['translate'][0])+':'+str(mat.explode()['translate'][1])+':'+str(mat.explode()['translate'][2])
                                    matrt=str(mat.explode()['rotate'][0])+':'+str(mat.explode()['rotate'][1])+':'+str(mat.explode()['rotate'][2])
                                    matsc=str(mat.explode()['scale'][0])+':'+str(mat.explode()['scale'][1])+':'+str(mat.explode()['scale'][2])
                                    lmattr=lmatrt='0.0:0.0:0.0'
                                    lmatsc='1.0:1.0:1.0'
                                    try:
                                        locmat=vpnode.geometry().prim(gi[0]).fullTransform()
                                        lmattr=str(locmat.explode()['translate'][0])+':'+str(locmat.explode()['translate'][1])+':'+str(locmat.explode()['translate'][2])
                                        lmatrt=str(locmat.explode()['rotate'][0])+':'+str(locmat.explode()['rotate'][1])+':'+str(locmat.explode()['rotate'][2])
                                        lmatsc=str(locmat.explode()['scale'][0])+':'+str(locmat.explode()['scale'][1])+':'+str(locmat.explode()['scale'][2])
                                    except:
                                        pass                            
                                    hiddendata=vpnode.path()+','+str(gi[0])+','+str(gi[3][0])+':'+str(gi[3][1])+','+rawprim.type().name()+','+mattr+','+matrt+','+matsc+','+lmattr+','+lmatrt+','+lmatsc                       
                                    self._sethiddendata(self._indexes,hiddendata)
                        except:
                            pass
                    else:
                        self._finish()
        except:
            pass
            
            
    
            


#############################################                   
    def onMouseWheelEvent(self, kwargs):
        """ Process a mouse wheel event
        """
        #node = kwargs["node"]

        ui_event = kwargs["ui_event"]
        device = kwargs["ui_event"].device()
        scroll = device.mouseWheel()        
        # Must return True to consume the event
        if scroll!=0 and not device.isCtrlKey() and not device.isShiftKey(): 
            self._scale(self._indexes, scroll)
        if device.isCtrlKey():
            self._rot(self._indexes, scroll)
        if device.isShiftKey():
            self._offset(self._indexes, scroll)
        return False
############################################
############################################            

    def onInterrupt(self, kwargs):
        #self._guide.show(False)
#        self._cursor.show(False)
        self.scene_viewer.setPromptMessage(self.MSG)
        self._finish()
        
        
    def onResume(self, kwargs):
        #################Messages
        self.scene_viewer.setPromptMessage(self.MSG)
#        self._cursor.show(True)
        #self._guide.show(True)




def createViewerStateTemplate():
    """ Mandatory entry point to create and return the viewer state 
        template to register. """

    state_typename = kwargs["type"].definition().sections()["DefaultState"].contents()
    state_label = "Assets placer"
    state_cat = hou.sopNodeTypeCategory()

    template = hou.ViewerStateTemplate(state_typename, state_label, state_cat)
    template.bindFactory(DrawPoints)
    major=getappver()[0]
    if major>=18:
        definition=kwargs["type"].definition()
        template.bindIcon(kwargs["type"].icon())
    ##################
    menu = hou.ViewerStateMenu('instance_menu', 'Instance_Menu')
    menu.addActionItem('1', 'Instances')
    menu.addActionItem('2', 'Replace Current')
    menu.addActionItem('3', 'Remove Current')
    template.bindMenu(menu)


    ######################
    return template
    
   
#################################